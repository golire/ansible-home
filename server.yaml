---
- name: Configure home server
  hosts: all
  become: true
#  vars:
  tasks:
    - name: Create secondary groups
      group:
        name: "{{ item.name }}"
        gid: "{{ item.gid }}"
        state: present
      with_items: "{{ secondary_groups }}"

    - name: Create primary groups for users
      group:
        name: "{{ item.name }}"
        gid: "{{ item.gid | int }}"
        state: present
      with_items: "{{ home_users }}"
      when: item.gid | default(false)
      # how to define passwords for users
    - name: Create users
      user:
        name: "{{ item.name }}"
        password: "{{ item.password | default(omit) | password_hash('sha512') }}"
        update_password: "{{ item.update_password | default('on_create') }}"
        uid: "{{ item.uid | default(omit) }}"
        group: "{{ item.gid | default(omit) }}"
        state: present
        groups: "{{ item.groups }}"
        append: true
        create_home: true
        shell: /bin/bash
      with_items: "{{ home_users }}"

    - name: Set authorized key for remote users
      authorized_key:
        user: "{{ item.user }}"
        state: present
        key: "{{ item.key }}"
      with_items: "{{ copy_ssh_keys }}"

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    # add apt module prerequisitiy 
    # pip install python-apt / python3-apt to ansible remote python env
    - name: Install samba packages
      apt:
        name: 
          - samba-common
          - samba
          - samba-client
        state: present

    - name: Create Samba shares root folders
      file:
        state: directory
        path: "{{ item }}"
        owner: root
        group: root
        mode: '0755'
      with_items: "{{ samba_shares | map(attribute='root') | unique }}"

    - name: Create samba shared folders
      file:
        state: directory
        path: "{{ [item.root,item.name|lower]|join('/') }}"
        owner: "{{ item.owner|default('root') }}"
        group: "{{ item.group|default('smbrw') }}"
        mode: "{{ item.directory_mode|default('0775') }}"
      with_items: "{{ samba_shares }}"

    - name: Create Samba configuration file
      template:
        dest: /etc/samba/smb.conf
        src: smb.conf.j2
        backup: true
        validate: 'testparm -s %s'
      notify:
        - Restart Samba services

    - name: Start Samba service(s)
      service:
        name: smbd
        state: started
        enabled: true
      # sync pass smb -> OS - controlled by smb.conf
      # sync pass OS -> smb - controlled by PAM
    - name: Create Samba users if they don't exist yet
      shell: >
        set -o nounset -o pipefail -o errexit &&
        (pdbedit -L --user={{ item.name }} 2>&1 > /dev/null) \
        || (echo {{ item.password }}; echo {{ item.password }}) \
        | smbpasswd -s -a {{ item.name }}
      args:
        executable: /bin/bash
      with_items: "{{ samba_users }}"
      no_log: true
      register: create_user_output
      changed_when: "'Added user' in create_user_output.stdout"

  handlers:
    - name: Restart Samba services
      service:
        name: smbd
        state: restarted
